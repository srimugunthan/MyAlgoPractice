
Trees

Binary Search Trees
1. Insertion of node in a BST
2. All Traversals - recursion
3. All Traversals(?!!) -without tail recursion
4. All Traversals - without any recursion
5. Prefix_expr=Reverse(Postfix(Reverse(Infix_expr)));
6. Finding the no. of nodes in a tree
7. Finding the height of the tree
8. Finding the mirror image of tree [do postordertrav. n swap(left,right)]
9. * - Double a tree....
10. given (BST,sum) return true if there is a path(frm root 2 any of leaves) in the BST adds up to the sum,
    otherwise return false
	* also print the path...
11. * - Deletion of a node in a binary search tree
12. * - In a binary tree, the right & left pointers in the leaf nodes points to the ancestors. Remove them.
13.  binary search tree -> max heap
14.  Construct a min skewed tree from the inorder squence.
15. *-Merge 2 heaps
16. *-Merge 2 BSTs
17. print a BST in a tree format
18. find whether a given tree is BST
19. flattening a tree
20. Common ancestor of 2 given node in a binary tree
21. Given inorder and preorder construct binary tree

Arrays

1. maximum palindrome in a given string
2. permutation, permutation without repitition
3. combination/ power set
4. 