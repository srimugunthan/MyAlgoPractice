
Section 11. ANSI/ISO Standard C

11.1:   What is the "ANSI C Standard?"

A:      In 1983, the American National Standards Institute (ANSI)
        commissioned a committee to standardize the C language.  Their
        work was ratified as ANS X3.159-1989, and has since been adopted
        as ISO/IEC 9899:1990, and later amended.

11.2:   How can I get a copy of the Standard?

A:      Copies are available from ANSI in New York, or from Global
        Engineering Documents in Englewood, CO, or from any national
        standards body, or from ISO in Geneva, or republished within one
        or more books.  See the unabridged list for details.

11.2a:  Where can I get information about updates to the Standard?

A:      See the full list for pointers.

11.3:   My ANSI compiler is complaining about prototype mismatches for
        parameters declared float.

A:      You have mixed the new-style prototype declaration
        "extern int func(float);" with the old-style definition
        "int func(x) float x;".  "Narrow" types are treated differently
        according to which syntax is used.  This problem can be fixed by
        avoiding narrow types, or by using either new-style (prototype)
        or old-style syntax consistently.

11.4:   Can you mix old-style and new-style function syntax?

A:      Doing so is currently perfectly legal, for most argument types
        (see question 11.3).

11.5:   Why does the declaration "extern f(struct x *p);" give me a
        warning message?

A:      A structure declared (or even mentioned) for the first time
        within a prototype cannot be compatible with other structures
        declared in the same source file.

11.8:   Why can't I use const values in initializers and array
        dimensions?

A:      The value of a const-qualified object is *not* a constant
        expression in the full sense of the term.

11.9:   What's the difference between "const char *"p and
        "char * const" p?

A:      The former declares a pointer to a constant character; the
        latter declares a constant pointer to a character.

11.10:  Why can't I pass a char ** to a function which expects a
        const char **?

A:      The rule which permits slight mismatches in qualified pointer
        assignments is not applied recursively.

11.12:  Can I declare main() as void, to shut off these annoying "main
        returns no value" messages?

A:      No.

11.13:  But what about main's third argument, envp?

A:      It's a non-standard (though common) extension.

11.14:  I believe that declaring void main() can't fail, since I'm
        calling exit() instead of returning.

A:      It doesn't matter whether main() returns or not, the problem is
        that its caller may not even be able to *call* it correctly.

11.15:  The book I've been using always uses void main().

A:      It's wrong.

11.16:  Is exit(status) truly equivalent to returning the same status
        from main()?

A:      Yes and no.  (See the full list for details.)

11.17:  How do I get the ANSI "stringizing" preprocessing operator `#'
        to stringize the macro's value instead of its name?

A:      You can use a two-step #definition to force a macro to be
        expanded as well as stringized.

11.18:  What does the message "warning: macro replacement within a
        string literal" mean?

A:      Some pre-ANSI compilers/preprocessors expanded macro parameters
        even inside string literals and character constants.

11.19:  I'm getting strange syntax errors inside lines I've #ifdeffed
        out.

A:      Under ANSI C, #ifdeffed-out text must still consist of "valid
        preprocessing tokens."  This means that there must be no
        newlines inside quotes, and no unterminated comments or quotes
        (i.e. no single apostrophes).

11.20:  What are #pragmas ?

A:      The #pragma directive provides a single, well-defined "escape
        hatch" which can be used for extensions.

11.21:  What does "#pragma once" mean?

A:      It is an extension implemented by some preprocessors to help
        make header files idempotent.

11.22:  Is char a[3] = "abc"; legal?

A:      Yes, in ANSI C.

11.24:  Why can't I perform arithmetic on a void * pointer?

A:      The compiler doesn't know the size of the pointed-to objects.

11.25:  What's the difference between memcpy() and memmove()?

A:      memmove() offers guaranteed behavior if the source and
        destination arguments overlap.

11.26:  What should malloc(0) do?

A:      The behavior is implementation-defined.

11.27:  Why does the ANSI Standard not guarantee more than six case-
        insensitive characters of external identifier significance?

A:      The problem is older linkers which cannot be forced (by mere
        words in a Standard) to upgrade.

11.29:  My compiler is rejecting the simplest possible test programs,
        with all kinds of syntax errors.

A:      Perhaps it is a pre-ANSI compiler.

11.30:  Why are some ANSI/ISO Standard library routines showing up as
        undefined, even though I've got an ANSI compiler?

A:      Perhaps you don't have ANSI-compatible headers and libraries.

11.31:  Does anyone have a tool for converting old-style C programs to
        ANSI C, or for automatically generating prototypes?

A:      See the full list for details.

11.32:  Why won't frobozz-cc, which claims to be ANSI compliant, accept
        this code?

A:      Are you sure that the code being rejected doesn't rely on some
        non-Standard extension?

11.33:  What's the difference between implementation-defined,
        unspecified, and undefined behavior?

A:      If you're writing portable code, ignore the distinctions.
        Otherwise, see the full list.

11.34:  I'm appalled that the ANSI Standard leaves so many issues
        undefined.

A:      In most of these cases, the Standard is simply codifying
        existing practice.

11.35:  I just tried some allegedly-undefined code on an ANSI-conforming
        compiler, and got the results I expected.

A:      A compiler may do anything it likes when faced with undefined
        behavior, including doing what you expect.

Section 12. Stdio

12.1:   What's wrong with the code "char c; while((c = getchar()) !=
        EOF) ..."?

A:      The variable to hold getchar's return value must be an int.

12.2:   Why won't the code "while(!feof(infp)) {
        fgets(buf, MAXLINE, infp); fputs(buf, outfp); }" work?

A:      EOF is only indicated *after* an input routine has reached end-
        of-file.

12.4:   My program's prompts and intermediate output don't always show
        up on the screen.

A:      It's best to use an explicit fflush(stdout) whenever output
        should definitely be visible.

12.5:   How can I read one character at a time, without waiting for the
        RETURN key?

A:      See question 19.1.

12.6:   How can I print a '%' character with printf?

A:      "%%".

12.9:   How can printf() use %f for type double, if scanf() requires
        %lf?

A:      C's "default argument promotions" mean that values of type float
        are promoted to double.

12.10:  How can I implement a variable field width with printf?

A:      Use printf("%*d", width, n).

12.11:  How can I print numbers with commas separating the thousands?

A:      There is no standard routine (but see <locale.h>).

12.12:  Why doesn't the call scanf("%d", i) work?

A:      The arguments you pass to scanf() must always be pointers.

12.13:  Why doesn't the code "double d; scanf("%f", &d);" work?

A:      Unlike printf(), scanf() uses %lf for double, and %f for float.

12.15:  How can I specify a variable width in a scanf() format string?

A:      You can't.

12.17:  When I read numbers from the keyboard with scanf "%d\n", it
        seems to hang until I type one extra line of input.

A:      Try using "%d" instead of "%d\n".

12.18:  I'm reading a number with scanf %d and then a string with
        gets(), but the compiler seems to be skipping the call to
        gets()!

A:      scanf() and gets() do not work well together.

12.19:  I'm re-prompting the user if scanf() fails, but sometimes it
        seems to go into an infinite loop.

A:      scanf() tends to "jam" on bad input since it does not discard
        it.

12.20:  Why does everyone say not to use scanf()?  What should I use
        instead?

A:      scanf() has a number of problems.  Usually, it's easier to read
        entire lines and then interpret them.

12.21:  How can I tell how much destination buffer space I'll need for
        an arbitrary sprintf call?  How can I avoid overflowing the
        destination buffer with sprintf()?

A:      There are not (yet) any good answers to either of these
        excellent questions.

12.23:  Why does everyone say not to use gets()?

A:      It cannot be prevented from overflowing the input buffer.

12.24:  Why does errno contain ENOTTY after a call to printf()?

A:      Don't worry about it.  It is only meaningful for a program to
        inspect the contents of errno after an error has been reported.

12.25:  What's the difference between fgetpos/fsetpos and ftell/fseek?

A:      fgetpos() and fsetpos() use a special typedef which may allow
        them to work with larger files than ftell() and fseek().

12.26:  Will fflush(stdin) flush unread characters from the standard
        input stream?

A:      No.

12.30:  I'm trying to update a file in place, by using fopen mode "r+",
        but it's not working.

A:      Be sure to call fseek between reading and writing.

12.33:  How can I redirect stdin or stdout from within a program?

A:      Use freopen().

12.34:  Once I've used freopen(), how can I get the original stream
        back?

A:      There isn't a good way.  Try avoiding freopen.

12.38:  How can I read a binary data file properly?

A:      Be sure to specify "rb" mode when calling fopen().

Section 13. Library Functions

13.1:   How can I convert numbers to strings?

A:      Just use sprintf().

13.2:   Why does strncpy() not always write a '\0'?

A:      For mildly-interesting historical reasons.

13.5:   Why do some versions of toupper() act strangely if given an
        upper-case letter?

A:      Older versions of toupper() and tolower() did not always work as
        expected in this regard.

13.6:   How can I split up a string into whitespace-separated fields?

A:      Try strtok().

13.7:   I need some code to do regular expression and wildcard matching.

A:      regexp libraries abound; see the full list for details.

13.8:   I'm trying to sort an array of strings with qsort(), using
        strcmp() as the comparison function, but it's not working.

A:      You'll have to write a "helper" comparison function which takes
        two generic pointer arguments, converts them to char **, and
        dereferences them, yielding char *'s which can be usefully
        compared.

13.9:   Now I'm trying to sort an array of structures, but the compiler
        is complaining that the function is of the wrong type for
        qsort().

A:      The comparison function must be declared as accepting "generic
        pointers" (const void *) which it then converts to structure
        pointers.

13.10:  How can I sort a linked list?

A:      Algorithms like insertion sort and merge sort work well, or you
        can keep the list in order as you build it.

13.11:  How can I sort more data than will fit in memory?

A:      You want an "external sort"; see the full list for details.

13.12:  How can I get the time of day in a C program?

A:      Just use the time(), ctime(), and/or localtime() functions.

13.13:  How can I convert a struct tm or a string into a time_t?

A:      The ANSI mktime() routine converts a struct tm to a time_t.  No
        standard routine exists to parse strings.

13.14:  How can I perform calendar manipulations?

A:      The ANSI/ISO Standard C mktime() and difftime() functions
        provide some support for both problems.

13.15:  I need a random number generator.

A:      The Standard C library has one: rand().

13.16:  How can I get random integers in a certain range?

A:      One method is something like

                (int)((double)rand() / ((double)RAND_MAX + 1) * N)

13.17:  Each time I run my program, I get the same sequence of numbers
        back from rand().

A:      You can call srand() to seed the pseudo-random number generator
        with a truly random initial value.

13.18:  I need a random true/false value, so I'm just taking rand() % 2,
        but it's alternating 0, 1, 0, 1, 0...

A:      Try using the higher-order bits: see question 13.16.

13.20:  How can I generate random numbers with a normal or Gaussian
        distribution?

A:      See the longer versions of this list for ideas.

13.24:  I'm trying to port this old program.  Why do I get "undefined
        external" errors for some library functions?

A:      Some semistandard functions have been renamed or replaced over
        the years; see the full list for details.

13.25:  I get errors due to library functions being undefined even
        though I #include the right header files.

A:      You may have to explicitly ask for the correct libraries to be
        searched.

13.26:  I'm still getting errors due to library functions being
        undefined, even though I'm requesting the right libraries.

A:      Library search order is significant; usually, you must search
        the libraries last.

13.28:  What does it mean when the linker says that _end is undefined?

A:      You generally get that message only when other things are
        undefined, too.

Section 14. Floating Point

14.1:   When I set a float variable to 3.1, why is printf() printing it
        as 3.0999999?

A:      Most computers use base 2 for floating-point numbers, and many
        fractions (including 0.1 decimal) are not exactly representable
        in base 2.

14.2:   Why is sqrt(144.) giving me crazy numbers?

A:      Make sure that you have #included <math.h>, and correctly
        declared other functions returning double.

14.3:   I keep getting "undefined: sin" compilation errors.

A:      Make sure you're actually linking with the math library.

14.4:   My floating-point calculations are acting strangely and giving
        me different answers on different machines.

A:      First, see question 14.2 above.  If the problem isn't that
        simple, see the full list for a brief explanation, or any good
        programming book for a better one.

14.5:   What's a good way to check for "close enough" floating-point
        equality?

A:      The best way is to use an accuracy threshold which is relative
        to the magnitude of the numbers being compared.

14.6:   How do I round numbers?

A:      For positive numbers, try (int)(x + 0.5) .

14.7:   Where is C's exponentiation operator?

A:      Try using the pow() function.

14.8:   The pre-#defined constant M_PI seems to be missing from
        <math.h>.

A:      That constant is not standard.

14.9:   How do I test for IEEE NaN and other special values?

A:      There is not yet a portable way, but see the full list for
        ideas.

14.11:  What's a good way to implement complex numbers in C?

A:      It is straightforward to define a simple structure and some
        arithmetic functions to manipulate them.

14.12:  I'm looking for some mathematical library code.

A:      Ajay Shah maintains an index of free numerical software which is
        archived in the comp.lang.c directory at rtfm.mit.edu (see
        question 20.40).

14.13:  I'm having trouble with a Turbo C program which crashes and says
        something like "floating point formats not linked."

A:      You may have to insert an extra call to a floating-point library
        routine to force loading of floating-point support.

Section 15. Variable-Length Argument Lists

15.1:   I heard that you have to #include <stdio.h> before calling
        printf().  Why?

A:      So that a proper prototype for printf() will be in scope.

15.2:   How can %f be used for both float and double arguments in
        printf()?

A:      In variable-length argument lists, types char and short int are
        promoted to int, and float is promoted to double.

15.3:   Why don't function prototypes guard against mismatches in
        printf's arguments?

A:      Function prototypes do not provide any information about the
        number and types of variable arguments.

15.4:   How can I write a function that takes a variable number of
        arguments?

A:      Use the <stdarg.h> header.

15.5:   How can I write a function that takes a format string and a
        variable number of arguments, like printf(), and passes them to
        printf() to do most of the work?

A:      Use vprintf(), vfprintf(), or vsprintf().

15.6:   How can I write a function analogous to scanf(), that calls
        scanf() to do most of the work?

A:      Unfortunately, vscanf and the like are not standard.

15.7:   I have a pre-ANSI compiler, without <stdarg.h>.  What can I do?

A:      There's an older header, <varargs.h>, which offers about the
        same functionality.

15.8:   How can I discover how many arguments a function was actually
        called with?

A:      Any function which takes a variable number of arguments must be
        able to determine *from the arguments' values* how many of them
        there are.

15.9:   My compiler isn't letting me declare a function that accepts
        *only* variable arguments.

A:      Standard C requires at least one fixed argument.

15.10:  Why isn't "va_arg(argp, float)" working?

A:      Because the "default argument promotions" apply in variable-
        length argument lists, you should always use
        va_arg(argp, double).

15.11:  I can't get va_arg() to pull in an argument of type pointer-to-
        function.

A:      Use a typedef.

15.12:  How can I write a function which takes a variable number of
        arguments and passes them to some other function ?

A:      In general, you cannot.

15.13:  How can I call a function with an argument list built up at run
        time?

A:      You can't.

Section 16. Strange Problems

16.2a:  I'm getting baffling syntax errors which make no sense at all,
        and it seems like large chunks of my program aren't being
        compiled.

A:      Check for unclosed comments or mismatched preprocessing
        directives.

16.2b:  Why isn't my procedure call working?

A:      Function calls always require parenthesized argument lists.

16.3:   This program crashes before it even runs!

A:      Look for very large, local arrays.
        (See also questions 11.12, 16.4, 16.5, and 18.4.)

16.4:   I have a program that seems to run correctly, but then crashes
        as it's exiting.

A:      See the full list for ideas.

16.5:   This program runs perfectly on one machine, but I get weird
        results on another.

A:      See the full list for a brief list of possibilities.

16.6:   Why does the code "char *p = "hello, world!"; p[0] = 'H';"
        crash?

A:      String literals are not modifiable, except (in effect) when they
        are used as array initializers.

16.8:   What does "Segmentation violation" mean?

A:      It generally means that your program tried to access memory it
        shouldn't have, invariably as a result of stack corruption or
        improper pointer use.

Section 17. Style

17.1:   What's the best style for code layout in C?

A:      There is no one "best style," but see the full list for a few
        suggestions.

17.3:   Is the code "if(!strcmp(s1, s2))" good style?

A:      Not particularly.

17.4:   Why do some people write if(0 == x) instead of if(x == 0)?

A:      It's a trick to guard against the common error of writing
        if(x = 0) .

17.5:   I came across some code that puts a (void) cast before each call
        to printf().  Why?

A:      To suppress warnings about otherwise discarded return values.

17.8:   What is "Hungarian Notation"?

A:      It's a naming convention which encodes things about a variable's
        type in its name.

17.9:   Where can I get the "Indian Hill Style Guide" and other coding
        standards?

A:      See the unabridged list.

17.10:  Some people say that goto's are evil and that I should never use
        them.  Isn't that a bit extreme?

A:      Yes.  Absolute rules are an imperfect approach to good
        programming style.

Section 18. Tools and Resources

18.1:   I'm looking for C development tools (cross-reference generators,
        code beautifiers, etc.).

A:      See the full list for a few names.

18.2:   How can I track down these pesky malloc problems?

A:      See the full list for a list of tools.

18.3:   What's a free or cheap C compiler I can use?

A:      See the full list for a brief catalog.

18.4:   I just typed in this program, and it's acting strangely.  Can
        you see anything wrong with it?

A:      See if you can run lint first.

18.5:   How can I shut off the "warning: possible pointer alignment
        problem" message which lint gives me for each call to malloc()?

A:      It may be easier simply to ignore the message, perhaps in an
        automated way with grep -v.

18.7:   Where can I get an ANSI-compatible lint?

A:      See the unabridged list for two commercial products.

18.8:   Don't ANSI function prototypes render lint obsolete?

A:      No.  A good compiler may match most of lint's diagnostics; few
        provide all.

18.9:   Are there any C tutorials or other resources on the net?

A:      There are several of them.

18.10:  What's a good book for learning C?

A:      There are far too many books on C to list here; the full list
        contains a few pointers.

18.13:  Where can I find the sources of the standard C libraries?

A:      Several possibilites are listed in the full list.

18.14:  I need code to parse and evaluate expressions.

A:      Several available packages are mentioned in the full list.

18.15:  Where can I get a BNF or YACC grammar for C?

A:      See the ANSI Standard, or the unabridged list.

18.15a: Does anyone have a C compiler test suite I can use?

A:      See the full list for several sources.

18.15c: Where are some collections of useful code fragments and
        examples?

A:      See the full list for a few sources.

18.16:  Where and how can I get copies of all these freely distributable
        programs?

A:      See the regular postings in the comp.sources.unix and
        comp.sources.misc newsgroups, or the full version of this list,
        for information.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                in place, or show one of those "twirling baton" progress
        indicators?

A:      The character '\r' is a carriage return, and '\b' is a
        backspace.

19.4:   How can I clear the screen, or print things in inverse video, or
        move the cursor?

A:      The only halfway-portable solution is the curses library.

19.5:   How do I read the arrow keys?  What about function keys?

A:      Such things depend on the keyboard, operating system, and
        library you're using.

19.6:   How do I read the mouse?

A:      What system are you using?

19.7:   How can I do serial ("comm") port I/O?

A:      It's system-dependent.

19.8:   How can I direct output to the printer?

A:      See the full list for ideas.

19.9:   How do I send escape sequences to control a terminal or other
        device?

A:      By sending them.  ESC is '\033' in ASCII.

19.10:  How can I do graphics?

A:      There is no portable way.

19.11:  How can I check whether a file exists?

A:      You can try the access() or stat() functions.  Otherwise, the
        only guaranteed and portable way is to try opening the file.

19.12:  How can I find out the size of a file, prior to reading it in?

A:      You might be able to get an estimate using stat() or fseek/ftell
        (but see the full list for caveats).

19.12a: How can I find the modification date of a file?

A:      Try stat().

19.13:  How can a file be shortened in-place without completely clearing
        or rewriting it?

A:      There are various ways to do this, but there is no portable
        solution.

19.14:  How can I insert or delete a line in the middle of a file?

A:      Short of rewriting the file, you probably can't.

19.15:  How can I recover the file name given an open file descriptor?

A:      This problem is, in general, insoluble.  It is best to remember
        the names of files yourself when you open them

19.16:  How can I delete a file?

A:      The Standard C Library function is remove().

19.17:  What's wrong with the call fopen("c:\newdir\file.dat", "r")?

A:      You probably need to double those backslashes.

19.18:  How can I increase the allowable number of simultaneously open
        files?

A:      Check your system documentation.

19.20:  How can I read a directory in a C program?

A:      See if you can use the opendir() and readdir() routines.

19.22:  How can I find out how much memory is available?

A:      Your operating system may provide a routine which returns this
        information.

19.23:  How can I allocate arrays or structures bigger than 64K?

A:      Some operating systems won't let you.

19.24:  What does the error message "DGROUP exceeds 64K" mean?

A:      It means that you have too much static data.

19.25:  How can I access memory located at a certain address?

A:      Set a pointer to the absolute address.

19.27:  How can I invoke another program from within a C program?

A:      Use system().

19.30:  How can I invoke another program and trap its output?

A:      Unix and some other systems provide a popen() routine.

19.31:  How can my program discover the complete pathname to the
        executable from which it was invoked?

A:      argv[0] may contain all or part of the pathname.  You may be
        able to duplicate the command language interpreter's search path
        logic to locate the executable.

19.32:  How can I automatically locate a program's configuration files
        in the same directory as the executable?

A:      It's hard; see also question 19.31 above.

19.33:  How can a process change an environment variable in its caller?

A:      If it's possible to do so at all, it's system dependent.

19.36:  How can I read in an object file and jump to routines in it?

A:      You want a dynamic linker or loader.

19.37:  How can I implement a delay, or time a user's response, with sub-
        second resolution?

A:      Unfortunately, there is no portable way.

19.38:  How can I trap or ignore keyboard interrupts like control-C?

A:      Use signal().

19.39:  How can I handle floating-point exceptions gracefully?

A:      Take a look at matherr() and signal(SIGFPE).

19.40:  How do I...  Use sockets?  Do networking?  Write client/server
        applications?

A:      These questions have more to do with the networking facilities
        you have available than they do with C.

19.40b: How do I use BIOS calls?  How can I write ISR's?  How can I
        create TSR's?

A:      These are very particular to specific systems.

19.41:  But I can't use all these nonstandard, system-dependent
        functions, because my program has to be ANSI compatible!

A:      That's an impossible requirement.  Any real program requires at
        least a few services which ANSI doesn't define.

Section 20. Miscellaneous

20.1:   How can I return multiple values from a function?

A:      Either pass pointers to several locations which the function can
        fill in, or have the function return a structure containing the
        desired values.

20.3:   How do I access command-line arguments?

A:      Via main()'s argv parameter.

20.5:   How can I write data files which can be read on other machines
        with different data formats?

A:      The most portable solution is to use text files.

20.6:   How can I call a function, given its name as a string?

A:      The most straightforward thing to do is to maintain a
        correspondence table of names and function pointers.

20.8:   How can I implement sets or arrays of bits?

A:      Use arrays of char or int, with a few macros to access the
        desired bit at the proper index.

20.9:   How can I determine whether a machine's byte order is big-endian
        or little-endian?

A:      The usual tricks involve pointers or unions.

20.10:  How can I convert integers to binary or hexadecimal?

A:      Internally, integers are already in binary.  During I/O, you may
        be able to select a base.

20.11:  Can I use base-2 constants (something like 0b101010)?
        Is there a printf() format for binary?

A:      No, on both counts.

20.12:  What is the most efficient way to count the number of bits which
        are set in a value?

A:      Many "bit-fiddling" problems like this one can be sped up and
        streamlined using lookup tables.

20.13:  What's the best way of making my program efficient?

A:      By picking good algorithms and implementing them carefully.

20.14:  Are pointers really faster than arrays?  How much do function
        calls slow things down?

A:      Precise answers to these and many similar questions depend on
        the processor and compiler in use.

20.17:  Is there a way to switch on strings?

A:      Not directly.

20.18:  Is there a way to have non-constant case labels (i.e. ranges or
        arbitrary expressions)?

A:      No.

20.19:  Are the outer parentheses in return statements really optional?

A:      Yes.

20.20:  Why don't C comments nest?  Are they legal inside quoted
        strings?

A:      C comments don't nest because PL/I's comments don't either.  The
        character sequences /* and */ are not special within double-
        quoted strings.

20.24:  Why doesn't C have nested functions?

A:      They were deliberately left out of C as a simplification.

20.25:  How can I call FORTRAN (C++, BASIC, Pascal, Ada, LISP) functions
        from C?

A:      The answer is entirely dependent on the machine and the specific
        calling sequences of the various compilers in use.

20.26:  Does anyone know of a program for converting Pascal or FORTRAN
        to C?

A:      Several freely distributable programs are available, namely
        ptoc, p2c, and f2c.  See the full list for details.

20.27:  Can I use a C++ compiler to compile C code?

A:      Not necessarily; C++ is not a strict superset of C.

20.28:  I need to compare two strings for close, but not necessarily
        exact, equality.

A:      See the full list for ideas.

20.29:  What is hashing?

A:      A mapping of strings (or other data structures) to integers, for
        easier searching.

20.31:  How can I find the day of the week given the date?

A:      Use mktime(), Zeller's congruence, or some code in the full
        list.

20.32:  Will 2000 be a leap year?

A:      Yes.

20.34:  How do you write a program which produces its own source code as
        its output?

A:      Here's one:

                char*s="char*s=%c%s%c;main(){printf(s,34,s,34);}";
                main(){printf(s,34,s,34);}

20.35:  What is "Duff's Device"?

A:      It's a devastatingly deviously unrolled byte-copying loop.  See
        the full list for details.

20.36:  When will the next Obfuscated C Code Contest be held?  How can I
        get a copy of previous winning entries?

A:      See the full list, or send e-mail to judges@toad.com .

20.37:  What was the entry keyword mentioned in K&R1?

A:      It was reserved to allow functions with multiple, differently-
        named entry points, but it has been withdrawn.

20.38:  Where does the name "C" come from, anyway?

A:      C was derived from B, which was inspired by BCPL, which was a
        simplification of CPL.

20.39:  How do you pronounce "char"?

A:      Like the English words "char," "care," or "car" (your choice).

20.40:  Where can I get extra copies of this list?

A:      An up-to-date copy may be obtained from ftp.eskimo.com in
        directory u/s/scs/C-faq/.  You can also just pull it off the
        net; the unabridged version is normally posted on the first of
        each month, with an Expires: line which should keep it around
        all month.  It is also posted to the newsgroups comp.answers and
        news.answers .  Several sites archive news.answers postings and
        other FAQ lists, including this one; two sites are rtfm.mit.edu
        (directory pub/usenet), and ftp.uu.net (directory usenet).  An
        archie server should help you find others.

        A hypertext version of this FAQ list is available at
        http://www.eskimo.com/~scs/C-faq/top.html .
        An extended version has been published by Addison-Wesley
        as _C Programming FAQs: Frequently Asked Questions_
        (ISBN 0-201-84519-9).
